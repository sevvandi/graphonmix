[{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sevvandi.github.io/graphonmix/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"uw-mixture-graphs","dir":"Articles","previous_headings":"","what":"(U,W)-mixture graphs","title":"Introduction","text":"(U,W)(U,W)-mixture graphs graphs generated two graphons UU WW. Graphon WW generates dense graphs graphon UU generates sparse graphs. vignette Line graphs graphons explains graphon UU generates sparse graphs. dense sparse graphs generated, nodes joined randomly. gives mixture graph. methodology explained (Kandanaarachchi Ong 2025).","code":""},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"the-two-graphons-w-and-u","dir":"Articles","previous_headings":"(U,W)-mixture graphs","what":"The two graphons W and U","title":"Introduction","text":"Let’s plot two graphons WW UU first.  graphon WW generates dense part graph. graphon UU, show generates sparse part graph.","code":"# create the dense graphon W(x,y) = exp(-(x+y)/40) where x and y ranges from 1 to 100 W <- create_exp_matrix(100, 40) # plot this graphon plot_graphon(W) +  coord_fixed(ratio = 1) +  ggtitle(\"Dense graphon W\") # weights for the sparse part seq <- 2:5 wts <- (1/1.2^seq)  wts <- wts/sum(wts) wts #> [1] 0.3219076 0.2682563 0.2235469 0.1862891  U <- line_graphon(wts) plot_graphon(U) +    coord_fixed(ratio = 1) +  ggtitle(\"Line graphon U\")"},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"generating-the-mixture-graph-in-one-step","dir":"Articles","previous_headings":"(U,W)-mixture graphs","what":"Generating the mixture graph in one step","title":"Introduction","text":"Graphon UU generated weights wts piece code. Given wts WW can generate mixture graph using function sample_mixed_graph. need specify number nodes dense part nd number nodes sparse part ns. parameter p gives proportion number edges added joining process. joining process adds p×p \\timesnumber edges dense part graph. edges connect nodes dense part sparse part randomly.","code":"# single function to generate a graph mixture gr1 <- sample_mixed_graph(W, wts, nd = 100, ns = 300, p = 0.5) # plot(gr1, vertex.label = NA, vertex.size = 1, main = \"(U,W) Graph mixture\") plot(gr1,      edge.curved = 0.3,      vertex.size = degree(gr1)*0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"(U,W) Graph mixture\" )"},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"generating-a-dense-and-sparse-graph-and-joining-to-get-the-mixture","dir":"Articles","previous_headings":"(U,W)-mixture graphs","what":"Generating a dense and sparse graph and joining to get the mixture","title":"Introduction","text":"can generate dense part sparse part separately join .","code":"# sample dense part and plot it grdense <- sample_graphon(W, n = 100) plot(grdense,      edge.curved = 0.3,      vertex.size = degree(grdense) * 0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"Dense Part\" ) # sample sparse part and plot it grsparse <- generate_star_union(wts, n = 300) plot(grsparse,      edge.curved = 0.3,      vertex.size = degree(grsparse) * 0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"Sparse Part\" ) # join the two graphs and plot it gr2 <- graph_join(grdense, grsparse, p = 0.5) plot(gr2,      edge.curved = 0.3,      vertex.size = degree(gr2) * 0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"(U,W) Graph mixture\" )"},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"estimating-graphon-u","dir":"Articles","previous_headings":"","what":"Estimating graphon U","title":"Introduction","text":"graph sequence sparse, high degrees graph generated graphon UU. different low degrees. can see plot sorted log degrees observed graph.","code":""},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"observing-the-elbow-point-in-unique-log-degrees","dir":"Articles","previous_headings":"Estimating graphon U","what":"Observing the elbow point in unique log degrees","title":"Introduction","text":"graph plots sorted unique log degrees mixture graph. Notice elbow point around indices 4 5.  Let us check degrees dense part sparse part compare degrees mixture graph course graph joining process increases degrees nodes nodes joined additional edges. See small number nodes sparse part degrees greater dense part.","code":"degu <- sort(unique(degree(gr2)), decreasing = TRUE) # we only take the top 1/2 of the unique degree values here to see the effect of the hub nodes clearly degu <- degu[degu >= median(degu)]  df <- data.frame(   index = 1:length(degu),   log_degree = log(degu) )  ggplot(df, aes(index, log_degree)) +   geom_point() +   xlab(\"Index\") +   ylab(\"Log Degree\") deg_dense <- sort(unique(degree(grdense)), decreasing = TRUE) deg_dense #>  [1] 41 39 36 31 30 29 28 26 25 24 21 19 18 17 16 15 14 13 12 11 10  9  8  7  6 #> [26]  5  4  3  2  1  0  deg_sparse <- sort(unique(degree(grsparse)), decreasing = TRUE) deg_sparse #> [1] 96 80 67 55  1  deg_mix <- sort(unique(degree(gr2)), decreasing = TRUE) deg_mix #>  [1] 97 82 71 56 42 40 36 33 32 31 30 29 28 26 25 24 22 20 19 18 17 16 15 14 13 #> [26] 12 11 10  9  8  7  6  5  4  3  2  1 which(deg_sparse > max(deg_dense)) #> [1] 1 2 3 4"},{"path":"https://sevvandi.github.io/graphonmix/articles/graphonmix.html","id":"detecting-the-elbow-point-and-estimating-u","dir":"Articles","previous_headings":"Estimating graphon U","what":"Detecting the elbow point and estimating UU","title":"Introduction","text":"mixture graph can identify sparse part. finding elbow point log degree graph shown . function extract_sparse job. estimated mass-partition given $phat code. estimate close actual mass partition given wts. can see elbow point unique log degree graph autoplot.  Now estimated weights (mass-partition) can plot estimated graphon Û\\hat{U}.","code":"out <- extract_sparse(gr2) out$num_hubs #> [1] 4  # Estimate of the mass-partition out$phat #> [1] 0.3169935 0.2679739 0.2320261 0.1830065  # Actual mass partition wts #> [1] 0.3219076 0.2682563 0.2235469 0.1862891 autoplot(out) Uhat <- line_graphon(out$phat) plot_graphon(Uhat) +    coord_fixed(ratio = 1) +  ggtitle(\"Estimate of U\")"},{"path":[]},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"line-graphs","dir":"Articles","previous_headings":"","what":"Line graphs","title":"Sparse graphs from line graphons","text":"Suppose GG graph. line graph GG, commonly denoted L(G)L(G) maps edges GG vertices L(G)L(G) two vertices L(G)L(G) connected original edges GG share common vertex. ’s example.","code":"g1 <- make_star(4,mode = \"undirected\") g1 <- add_vertices(g1, 1) g1 <- add_edges(g1,c(4,5))  lg1 <- make_line_graph(g1)  par(mfrow = c(1,2)) plot(g1, vertex.label = NA, edge.label = c(1,2,3,4), main = \"Graph G\") plot(lg1, vertex.label = c(1,2,3,4), vertex.size = 20, main = \"Line graph L(G)\")"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"line-graphs-of-star-graphs","dir":"Articles","previous_headings":"Line graphs","what":"Line graphs of star graphs","title":"Sparse graphs from line graphons","text":"key line graphs stars complete graphs. example edge graph GG vertex L(G)L(G). Two vertices L(G)L(G) connected corresponding edges GG share vertex.","code":"st <- make_star(10, mode = \"undirected\") lgr_st <- make_line_graph(st)  par(mfrow = c(1,2)) plot(st, vertex.label = NA, main = \"Star graph G\") plot(lgr_st, vertex.label = NA,  main = \"Line graph L(G) of a star\")"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"sparse-graphs","dir":"Articles","previous_headings":"","what":"Sparse graphs","title":"Sparse graphs from line graphons","text":"sequence graphs sparse edges grow subquadratically nodes. Star graphs ultimate sparse graphs, star nn nodes n−1n-1 edges. graph sequence dense edges grow quadratically nodes. Erdos-Renyi graphs G(n,p)G(n,p) fixed edge probability pp dense. can seen edge density. Let’s generate sequence star graphs sequence Erdos-Renyi graphs see action. see density stars goes zero whereas density GNP graphs hover around 0.1, used edge probability 0.1.","code":"stardensity <- gnpdensity <- rep(0, 20)   for(i in 1:20){   n <- i*100   gr1 <- sample_gnp(n, p = 0.1)   gnpdensity[i] <- edge_density(gr1)   gr2 <- make_star(n, mode = \"undirected\")   stardensity[i] <- edge_density(gr2) } gnpdensity #>  [1] 0.09696970 0.10120603 0.09895206 0.09996241 0.09983166 0.10017807 #>  [7] 0.09997956 0.09944931 0.10038561 0.09987988 0.10030275 0.09965388 #> [13] 0.09979392 0.10010926 0.09974917 0.10025094 0.09994807 0.09999568 #> [19] 0.10022560 0.10025063 stardensity #>  [1] 0.020000000 0.010000000 0.006666667 0.005000000 0.004000000 0.003333333 #>  [7] 0.002857143 0.002500000 0.002222222 0.002000000 0.001818182 0.001666667 #> [13] 0.001538462 0.001428571 0.001333333 0.001250000 0.001176471 0.001111111 #> [19] 0.001052632 0.001000000"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"graphons","dir":"Articles","previous_headings":"","what":"Graphons","title":"Sparse graphs from line graphons","text":"Graphons graph limits. Suppose graph GG. empirical graphon GG scale adjacency matrix unit square color small squares correspond ones adjacency matrix black. plot empirical graphon star graph 10 nodes.","code":"gr <- make_star(10, mode = \"undirected\") emp <- empirical_graphon(gr) plot_graphon(emp) + coord_fixed()"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"graphons-of-sparse-graphs","dir":"Articles","previous_headings":"Graphons","what":"Graphons of sparse graphs","title":"Sparse graphs from line graphons","text":"problem graphons sparse graphs zero. Graphons generally denoted letter WW. graphs sparse W=0W = 0. , empirical graphons converge zero. , ’re bit handwavy convergence (actually, convergence respect cut metric, let’s let’s discuss ).  n→∞n \\\\infty, less black parts empirical graphon converges zero. graphon zero, sample ; useful anymore. ?","code":"gr <- make_star(20, mode = \"undirected\") emp <- empirical_graphon(gr) g1 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 10')  gr <- make_star(100, mode = \"undirected\")  emp <- empirical_graphon(gr) g2 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 100')  gr <- make_star(200, mode = \"undirected\") emp <- empirical_graphon(gr) g3 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 200')   gridExtra::grid.arrange(g1, g2, g3, nrow = 1)"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"graphons-of-line-graphs","dir":"Articles","previous_headings":"","what":"Graphons of line graphs","title":"Sparse graphs from line graphons","text":"subset sparse graphs, star graphs, line graphs dense. discuss detail (Kandanaarachchi Ong 2024). main example star graphs.  example two stars, line graphs dense converge non-zero graphon.","code":"gr1 <- make_star(10, mode = \"undirected\") gr <- gr1 %du% gr1 lgr <- make_line_graph(gr) emp <- empirical_graphon(lgr) g1 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 20')   gr1 <- make_star(50, mode = \"undirected\") gr <- gr1 %du% gr1 lgr <- make_line_graph(gr) emp <- empirical_graphon(lgr) g2 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 100')   gr1 <- make_star(100, mode = \"undirected\") gr <- gr1 %du% gr1 lgr <- make_line_graph(gr) emp <- empirical_graphon(lgr) g3 <- plot_graphon(emp) + coord_fixed() + ggtitle('n = 200')   gridExtra::grid.arrange(g1, g2, g3, nrow = 1)"},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"jansons-theorem","dir":"Articles","previous_headings":"Graphons of line graphs","what":"Janson’s theorem","title":"Sparse graphs from line graphons","text":"Janson (Janson 2016) proved line graph limits disjoint clique graphs. important theorem us tells us structure line graph limits . Janson explains line graph limits can written sequence numbers (p1,p2,…)(p_1, p_2, \\ldots) ∑ipi≤1\\sum_i p_i \\leq 1 pi≥0p_i \\geq 0. pip_i gives width black box graphon.","code":""},{"path":"https://sevvandi.github.io/graphonmix/articles/linegraphons.html","id":"generating-stars-as-inverse-line-graphs","dir":"Articles","previous_headings":"Graphons of line graphs","what":"Generating stars as inverse line graphs","title":"Sparse graphs from line graphons","text":"line graph limit can generate disjoint union clique graphs like .  inverse line graphs disjoint clique graphs star graphs. star graphs sparse. can generate star graphs using weights partition (p1,p2,…)(p_1, p_2, \\ldots).  sparse part (U,W)(U,W)-mixture graph generated. vignette Articles/Getting Started explains mixture procedure.","code":"wts <- c(0.5, 0.3, 0.2) U <-  line_graphon(wts) gr <- sample_graphon(U, n = 100) plot(gr,      vertex.size = 1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\" ) grsp <- generate_star_union(wts, n = 100) plot(grsp,      edge.curved = 0.3,      vertex.size = 1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\" )"},{"path":[]},{"path":"https://sevvandi.github.io/graphonmix/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sevvandi Kandanaarachchi. Author, maintainer.","code":""},{"path":"https://sevvandi.github.io/graphonmix/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kandanaarachchi S (2025). graphonmix: Generates Mixture Graphs Dense Sparse Graphons. R package version 0.0.1.0, https://sevvandi.github.io/graphonmix/.","code":"@Manual{,   title = {graphonmix: Generates Mixture Graphs from Dense and Sparse Graphons},   author = {Sevvandi Kandanaarachchi},   year = {2025},   note = {R package version 0.0.1.0},   url = {https://sevvandi.github.io/graphonmix/}, }"},{"path":"https://sevvandi.github.io/graphonmix/index.html","id":"graphonmix-","dir":"","previous_headings":"","what":"Generates Mixture Graphs from Dense and Sparse Graphons","title":"Generates Mixture Graphs from Dense and Sparse Graphons","text":"goal graphonmix generate (U,W)(U,W)-mixture graphs. graphs generated standard dense graphon WW disjoint clique graphons UU, acts sparse graphon. details can found (Kandanaarachchi Ong 2025).","code":""},{"path":"https://sevvandi.github.io/graphonmix/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generates Mixture Graphs from Dense and Sparse Graphons","text":"can install development version graphonmix GitHub :","code":"# install.packages(\"pak\") pak::pak(\"sevvandi/graphonmix\")"},{"path":"https://sevvandi.github.io/graphonmix/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generates Mixture Graphs from Dense and Sparse Graphons","text":"basic example sample (U,W)(U,W)-mixture graph.  can generate two graphs separately join .","code":"library(graphonmix) library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union # create the dense graphon W(x,y) = 0.1 W <- matrix(0.1, nrow = 100, ncol = 100) # create the sparse part - a disjoint set of stars wts <- c(0.5, 0.3, 0.2) # single function to generate a graph mixture gr1 <- sample_mixed_graph(W, wts, nd = 100, ns = 300, p = 0.5, option = 2) plot(gr1,      edge.curved = 0.3,      vertex.size = degree(gr1)*0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"(U,W) Graph mixture\" ) # sample the dense part and plot grdense <- sample_graphon(W, 100) plot(grdense,      edge.curved = 0.3,      vertex.size = degree(grdense)*0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"Dense Part\" ) # sample the sparse part and plot grsparse <- generate_star_union(wts, 300) plot(grsparse,      edge.curved = 0.3,      vertex.size = degree(grsparse)*0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"Sparse Part\" ) # join the two graphs and plot gr2 <- graph_join(grdense, grsparse, option = 2) plot(gr2,      edge.curved = 0.3,      vertex.size = degree(gr2)*0.1,      edge.color = \"lightgray\",     # Light colored edges      vertex.label = NA,      vertex.color = \"lightblue\",      main = \"(U,W) Graph mixture\" )"},{"path":"https://sevvandi.github.io/graphonmix/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Generates Mixture Graphs from Dense and Sparse Graphons","text":"big thank Sashenka Fernando helping hex sticker.","code":""},{"path":[]},{"path":"https://sevvandi.github.io/graphonmix/reference/autoplot.extract_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the output of extract_sparse function. — autoplot.extract_sparse","title":"Plots the output of extract_sparse function. — autoplot.extract_sparse","text":"Plots two lines fitted unique, sorted log degrees graph.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/autoplot.extract_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the output of extract_sparse function. — autoplot.extract_sparse","text":"","code":"# S3 method for class 'extract_sparse' autoplot(object, ...)"},{"path":"https://sevvandi.github.io/graphonmix/reference/autoplot.extract_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the output of extract_sparse function. — autoplot.extract_sparse","text":"object output function 'extract_sparse' ... arguments currently ignored","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/autoplot.extract_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the output of extract_sparse function. — autoplot.extract_sparse","text":"ggplot object.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/autoplot.extract_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the output of extract_sparse function. — autoplot.extract_sparse","text":"","code":"library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union gr <- sample_pa(10000, power = 1.2, directed = FALSE) sparse <- extract_sparse(gr) autoplot(sparse)"},{"path":"https://sevvandi.github.io/graphonmix/reference/create_exp_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an nxn exponential matrix — create_exp_matrix","title":"Creates an nxn exponential matrix — create_exp_matrix","text":"Creates nxn matrix (,j)th entry exp(-(+j)/scalar)","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/create_exp_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an nxn exponential matrix — create_exp_matrix","text":"","code":"create_exp_matrix(nrow, scalar)"},{"path":"https://sevvandi.github.io/graphonmix/reference/create_exp_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an nxn exponential matrix — create_exp_matrix","text":"nrow dimension matrix scalar scalar exp(-(+j)/scalar)","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/create_exp_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an nxn exponential matrix — create_exp_matrix","text":"nxn matrix","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/create_exp_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an nxn exponential matrix — create_exp_matrix","text":"","code":"W <- create_exp_matrix(100, 100)"},{"path":"https://sevvandi.github.io/graphonmix/reference/empirical_graphon.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes empirical graphon from graph — empirical_graphon","title":"Computes empirical graphon from graph — empirical_graphon","text":"Computes empirical graphon given graph","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/empirical_graphon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes empirical graphon from graph — empirical_graphon","text":"","code":"empirical_graphon(gr, n = NULL)"},{"path":"https://sevvandi.github.io/graphonmix/reference/empirical_graphon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes empirical graphon from graph — empirical_graphon","text":"gr graph n Dimension graphon matrix","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/empirical_graphon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes empirical graphon from graph — empirical_graphon","text":"empirical graphon","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/empirical_graphon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes empirical graphon from graph — empirical_graphon","text":"","code":"library(igraph) gr <- sample_gnp(1000, p=0.2) emp <-  empirical_graphon(gr, n = 100)"},{"path":"https://sevvandi.github.io/graphonmix/reference/extract_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","title":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","text":"function extracts sparse component (U,W) mixture graph fitting two lines unique sorted log degree values. first line gives number hubs sparse part remaining line fits degrees dense part.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/extract_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","text":"","code":"extract_sparse(gr)"},{"path":"https://sevvandi.github.io/graphonmix/reference/extract_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","text":"gr input graph","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/extract_sparse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","text":"list following components: num_hubs number hubs sparse component. phat probability vector sparse component. also known mass partition. segment_sizes sizes two line segments. line_equations two equations lines. cutoff best cut two lines. models models fitted lines. mse mean squared error data degree data.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/extract_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the sparse part from a (U,W) graphon mixture — extract_sparse","text":"","code":"library(igraph) gr <- sample_pa(10000, power = 1.2, directed = FALSE) sparse <- extract_sparse(gr) sparse$phat #> [1] 0.25958062 0.19595083 0.17498192 0.14533623 0.06507592 0.06362979 0.05856833 #> [8] 0.03687636"},{"path":"https://sevvandi.github.io/graphonmix/reference/generate_star_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a sparse graph of star graphs — generate_star_union","title":"Generates a sparse graph of star graphs — generate_star_union","text":"Generates union star graphs given weights","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/generate_star_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a sparse graph of star graphs — generate_star_union","text":"","code":"generate_star_union(wts, n)"},{"path":"https://sevvandi.github.io/graphonmix/reference/generate_star_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a sparse graph of star graphs — generate_star_union","text":"wts proportion hub degrees n number nodes new graph","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/generate_star_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a sparse graph of star graphs — generate_star_union","text":"disjoint union star graphs","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/generate_star_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a sparse graph of star graphs — generate_star_union","text":"","code":"library(igraph) wts <- c(0.5, 0.3, 0.2) gr <- generate_star_union(wts, n = 100) gr #> IGRAPH 7b5a921 U--- 100 97 -- Star #> + attr: name_1 (g/c), name_2 (g/c), mode_1 (g/c), mode_2 (g/c), #> | center_1 (g/n), center_2 (g/n), name (g/c), mode (g/c), center (g/n) #> + edges from 7b5a921: #>  [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  1-- 7  1-- 8  1-- 9  1--10  1--11 #> [11]  1--12  1--13  1--14  1--15  1--16  1--17  1--18  1--19  1--20  1--21 #> [21]  1--22  1--23  1--24  1--25  1--26  1--27  1--28  1--29  1--30  1--31 #> [31]  1--32  1--33  1--34  1--35  1--36  1--37  1--38  1--39  1--40  1--41 #> [41]  1--42  1--43  1--44  1--45  1--46  1--47  1--48  1--49  1--50 51--52 #> [51] 51--53 51--54 51--55 51--56 51--57 51--58 51--59 51--60 51--61 51--62 #> [61] 51--63 51--64 51--65 51--66 51--67 51--68 51--69 51--70 51--71 51--72 #> + ... omitted several edges"},{"path":"https://sevvandi.github.io/graphonmix/reference/graph_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins two graphs — graph_join","title":"Joins two graphs — graph_join","text":"Joins two graphs randomly connecting vertices","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/graph_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins two graphs — graph_join","text":"","code":"graph_join(gr1, gr2, p = 0.5, option = 2)"},{"path":"https://sevvandi.github.io/graphonmix/reference/graph_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins two graphs — graph_join","text":"gr1 first graph join gr2 second graph join p proportion edges gr1 added part joining option Two options. 1 disjoint union, 2 random edges union.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/graph_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joins two graphs — graph_join","text":"joined graph","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/graph_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joins two graphs — graph_join","text":"","code":"W <- create_exp_matrix(100, 100) # create the sparse part - a disjoint set of stars wts <- c(0.5, 0.3, 0.2) grdense <- sample_graphon(W, 100) grsparse <- generate_star_union(wts, 200) gr <- graph_join(grdense, grsparse, opt = 2)"},{"path":"https://sevvandi.github.io/graphonmix/reference/graphonmix-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graphonmix: Generates Mixture Graphs from Dense and Sparse Graphons — graphonmix-package","title":"graphonmix: Generates Mixture Graphs from Dense and Sparse Graphons — graphonmix-package","text":"Generates (U,W) mixture graphs U line graph graphon W dense graphon. Graphons graph limits graphon U can written sequence positive numbers adding 1. Graphs sampled U W joined randomly obtain mixture graph. Given mixture graph, U can inferred. Kandanaarachchi Ong (2025) doi:10.48550/arXiv.2505.13864 .","code":""},{"path":[]},{"path":"https://sevvandi.github.io/graphonmix/reference/graphonmix-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"graphonmix: Generates Mixture Graphs from Dense and Sparse Graphons — graphonmix-package","text":"Maintainer: Sevvandi Kandanaarachchi sevvandik@gmail.com (ORCID)","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/hill_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","title":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","text":"Given graph, computes Hill estimator power degree distribution.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/hill_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","text":"","code":"hill_estimator(gr, min_deg = 2)"},{"path":"https://sevvandi.github.io/graphonmix/reference/hill_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","text":"gr graph min_deg minimum degree consider. Default set 5","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/hill_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","text":"Hill estimate","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/hill_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the Hill estimator or the power of the degree distribution — hill_estimator","text":"","code":"library(igraph) gr <- sample_pa(10000,  directed = FALSE) hill_estimator(gr) #> [1] 1.086457"},{"path":"https://sevvandi.github.io/graphonmix/reference/line_graphon.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a line graphon from a sequence of probabilities — line_graphon","title":"Creates a line graphon from a sequence of probabilities — line_graphon","text":"Creates line graphon, disjoint clique graphon sequence probability values","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/line_graphon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a line graphon from a sequence of probabilities — line_graphon","text":"","code":"line_graphon(probs)"},{"path":"https://sevvandi.github.io/graphonmix/reference/line_graphon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a line graphon from a sequence of probabilities — line_graphon","text":"probs list probabilities starting largest.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/line_graphon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a line graphon from a sequence of probabilities — line_graphon","text":"line graphon","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/line_graphon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a line graphon from a sequence of probabilities — line_graphon","text":"","code":"library(ggplot2) wts <- c(0.5, 0.3, 0.2) U <- line_graphon(wts) plot_graphon(U)"},{"path":"https://sevvandi.github.io/graphonmix/reference/plot_graphon.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots graphon — plot_graphon","title":"Plots graphon — plot_graphon","text":"Plots graphon","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/plot_graphon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots graphon — plot_graphon","text":"","code":"plot_graphon(W, cols = c(\"white\", \"black\"))"},{"path":"https://sevvandi.github.io/graphonmix/reference/plot_graphon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots graphon — plot_graphon","text":"W graphon given nxn matrix cols Colors, default white black","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/plot_graphon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots graphon — plot_graphon","text":"ggplot object.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/plot_graphon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots graphon — plot_graphon","text":"","code":"W <- create_exp_matrix(100, 100) plot_graphon(W)"},{"path":"https://sevvandi.github.io/graphonmix/reference/predict_hubs.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicts the degree of hubs of an new graph — predict_hubs","title":"Predicts the degree of hubs of an new graph — predict_hubs","text":"Predicts degree hubs unseen graph given graph generated process.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/predict_hubs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicts the degree of hubs of an new graph — predict_hubs","text":"","code":"predict_hubs(gr, n, k = NULL)"},{"path":"https://sevvandi.github.io/graphonmix/reference/predict_hubs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicts the degree of hubs of an new graph — predict_hubs","text":"gr input graph n number nodes new graph k number hubs. Default NULL","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/predict_hubs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicts the degree of hubs of an new graph — predict_hubs","text":"vector hub degrees","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/predict_hubs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicts the degree of hubs of an new graph — predict_hubs","text":"","code":"library(igraph) gr <- sample_pa(10000, power = 1.2, directed = FALSE) predict_hubs(gr, n = 11000) #> [1] 696 235 190 136 133  81"},{"path":"https://sevvandi.github.io/graphonmix/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_graphon.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a graph given a graphon — sample_graphon","title":"Generates a graph given a graphon — sample_graphon","text":"Generates graph given dense graphon W.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_graphon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a graph given a graphon — sample_graphon","text":"","code":"sample_graphon(W, n)"},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_graphon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a graph given a graphon — sample_graphon","text":"W graphon given matrix n number nodes sampled graph","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_graphon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a graph given a graphon — sample_graphon","text":"graph sampled graphon W n nodes","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_graphon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a graph given a graphon — sample_graphon","text":"","code":"library(igraph) W <- matrix(0.2, nrow = 100, ncol = 100) gr <- sample_graphon(W, n= 100)"},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_mixed_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a (U,W) mixture graph — sample_mixed_graph","title":"Generate a (U,W) mixture graph — sample_mixed_graph","text":"Generate (U,W) mixture graph dense graphon W mass partition corresponding line graph graphon U.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_mixed_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a (U,W) mixture graph — sample_mixed_graph","text":"","code":"sample_mixed_graph(W, wts, nd, ns, p = 0.5, option = 2)"},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_mixed_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a (U,W) mixture graph — sample_mixed_graph","text":"W dense graphon. symmetric matrix values [0,1] wts degree proportions hub degrees. Need add 1. mass partition corresponding line graph graphon U. nd number nodes dense part graph ns number nodes sparse part graph p nodes added proportion edges dense part option Graph joining option. option == 1 disjoit union considered. option == 2 two graphs joined randomly number edges specified p.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_mixed_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a (U,W) mixture graph — sample_mixed_graph","text":"graph sampled (U,W) mixture.","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/sample_mixed_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a (U,W) mixture graph — sample_mixed_graph","text":"","code":"library(igraph) W <- matrix(0.1, nrow = 100, ncol = 100) wts <- c(0.5, 0.3, 0.2) ns <- 200 nd <- 100 p <- 0.5 gr <- sample_mixed_graph(W, wts, nd, ns, p, option = 2) gr #> IGRAPH 06fc421 U--- 300 996 -- Star #> + attr: name_1 (g/c), name_2 (g/c), mode_1 (g/c), mode_2 (g/c), #> | center_1 (g/n), center_2 (g/n), name (g/c), mode (g/c), center (g/n) #> + edges from 06fc421: #>  [1] 1-- 12 1-- 16 1-- 18 1-- 28 1-- 38 1-- 54 1-- 58 1-- 63 1-- 64 1-- 65 #> [11] 1-- 86 2--  6 2--  8 2-- 23 2-- 34 2-- 45 2-- 47 2-- 55 2-- 65 2-- 68 #> [21] 2-- 71 2-- 86 2-- 96 3--  6 3-- 18 3-- 28 3-- 36 3-- 40 3-- 57 3-- 59 #> [31] 3-- 71 3-- 74 3-- 79 3-- 84 3-- 87 3-- 94 3--177 4-- 20 4-- 45 4-- 49 #> [41] 4-- 55 4-- 57 4-- 59 4-- 60 4-- 67 4-- 77 4-- 82 4-- 90 4-- 91 4-- 98 #> [51] 4-- 99 4--247 4--298 5--  8 5-- 21 5-- 27 5-- 48 5-- 49 5-- 68 5-- 80 #> [61] 5-- 82 5-- 90 5-- 95 5--212 6-- 14 6-- 16 6-- 23 6-- 31 6-- 36 6-- 38 #> + ... omitted several edges"},{"path":"https://sevvandi.github.io/graphonmix/reference/scale_graphon.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales a graphon to an nxn matrix — scale_graphon","title":"Scales a graphon to an nxn matrix — scale_graphon","text":"Scales graphon nxn matrix suitable large adjacency matrices","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/scale_graphon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales a graphon to an nxn matrix — scale_graphon","text":"","code":"scale_graphon(W, n)"},{"path":"https://sevvandi.github.io/graphonmix/reference/scale_graphon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales a graphon to an nxn matrix — scale_graphon","text":"W graphon given symmetric square matrix n dimension output matrix","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/scale_graphon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales a graphon to an nxn matrix — scale_graphon","text":"Scaled nxn graphon","code":""},{"path":"https://sevvandi.github.io/graphonmix/reference/scale_graphon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales a graphon to an nxn matrix — scale_graphon","text":"","code":"library(igraph) gr <- sample_gnp(1000, p=0.2) adj <- as_adjacency_matrix(gr) W <- scale_graphon(adj, 100)"}]
